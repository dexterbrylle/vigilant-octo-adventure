buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"

    }
}

def kotlinPluginId = 'kotlin-multiplatform'
final hasPlugin = project.getPlugins().hasPlugin(kotlinPluginId);
if (hasPlugin) {
    final Plugin plugin = project.getPlugins().getPlugin(kotlinPluginId)
    println 'Plugin already applied - version ' + plugin.properties['kotlinPluginVersion']
} else {
    apply plugin: "kotlin-multiplatform"
}

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
    jcenter()
}

group 'com.mpp.accounts.mobile'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'org.jetbrains.kotlin.android.extensions'

kotlin {
    js {
        browser {

        }
        nodejs {

        }
    }
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('DEH-MPP')
            }
        }

        fromPreset(presets.jvm, 'android') {
        }
//    // This is for iPhone simulator
//    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
//    iosX64("ios") {
//        binaries {
//            framework()
//        }
//    }

    }
    sourceSets {
        ext.kotlinVersion = "1.3.72"
        ext.serializationVersion = "0.20.0"
        ext.ktorVersion = "1.3.2"

        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation ("io.ktor:ktor-client-serialization:$ktorVersion")
                implementation ("io.ktor:ktor-client-json:$ktorVersion")
                implementation ("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0")
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.7")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation ("io.ktor:ktor-client-okhttp:$ktorVersion")
                implementation ("io.ktor:ktor-client-json-jvm:$ktorVersion")
                implementation ("io.ktor:ktor-client-serialization-jvm:$ktorVersion")
                implementation ("io.ktor:ktor-client-serialization:$ktorVersion")
                implementation ("io.ktor:ktor-client-json:$ktorVersion")
                implementation ("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0")
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7")
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation ("io.ktor:ktor-client-ios:$ktorVersion")
                implementation ("io.ktor:ktor-client-json-native:$ktorVersion")
                implementation ("io.ktor:ktor-client-serialization-native:$ktorVersion")
                implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.7")
            }
        }
        iosTest {
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
    }
}

configurations {
    compileClasspath
}

task packForXcode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("DEH-MPP", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXcode
